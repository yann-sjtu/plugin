
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dice2.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dice2_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dice2_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dice2_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dice2_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dice2_2eproto;
namespace dice2 {
class addrinfo;
class addrinfoDefaultTypeInternal;
extern addrinfoDefaultTypeInternal _addrinfo_default_instance_;
class gamestatus;
class gamestatusDefaultTypeInternal;
extern gamestatusDefaultTypeInternal _gamestatus_default_instance_;
class roundinfo;
class roundinfoDefaultTypeInternal;
extern roundinfoDefaultTypeInternal _roundinfo_default_instance_;
}  // namespace dice2
PROTOBUF_NAMESPACE_OPEN
template<> ::dice2::addrinfo* Arena::CreateMaybeMessage<::dice2::addrinfo>(Arena*);
template<> ::dice2::gamestatus* Arena::CreateMaybeMessage<::dice2::gamestatus>(Arena*);
template<> ::dice2::roundinfo* Arena::CreateMaybeMessage<::dice2::roundinfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace dice2 {

// ===================================================================

class roundinfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dice2.roundinfo) */ {
 public:
  inline roundinfo() : roundinfo(nullptr) {}
  virtual ~roundinfo();

  roundinfo(const roundinfo& from);
  roundinfo(roundinfo&& from) noexcept
    : roundinfo() {
    *this = ::std::move(from);
  }

  inline roundinfo& operator=(const roundinfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline roundinfo& operator=(roundinfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const roundinfo& default_instance();

  static inline const roundinfo* internal_default_instance() {
    return reinterpret_cast<const roundinfo*>(
               &_roundinfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(roundinfo& a, roundinfo& b) {
    a.Swap(&b);
  }
  inline void Swap(roundinfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(roundinfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline roundinfo* New() const final {
    return CreateMaybeMessage<roundinfo>(nullptr);
  }

  roundinfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<roundinfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const roundinfo& from);
  void MergeFrom(const roundinfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(roundinfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dice2.roundinfo";
  }
  protected:
  explicit roundinfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dice2_2eproto);
    return ::descriptor_table_dice2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 6,
    kRoundFieldNumber = 1,
    kAmountFieldNumber = 2,
    kHeightFieldNumber = 3,
    kGuessNumFieldNumber = 4,
    kRandNumFieldNumber = 5,
    kPlayerWinFieldNumber = 7,
    kIsFinishedFieldNumber = 8,
  };
  // string player = 6;
  void clear_player();
  const std::string& player() const;
  void set_player(const std::string& value);
  void set_player(std::string&& value);
  void set_player(const char* value);
  void set_player(const char* value, size_t size);
  std::string* mutable_player();
  std::string* release_player();
  void set_allocated_player(std::string* player);
  private:
  const std::string& _internal_player() const;
  void _internal_set_player(const std::string& value);
  std::string* _internal_mutable_player();
  public:

  // int64 round = 1;
  void clear_round();
  ::PROTOBUF_NAMESPACE_ID::int64 round() const;
  void set_round(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_round() const;
  void _internal_set_round(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 amount = 2;
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::int64 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 height = 3;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int64 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 guess_num = 4;
  void clear_guess_num();
  ::PROTOBUF_NAMESPACE_ID::int64 guess_num() const;
  void set_guess_num(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_guess_num() const;
  void _internal_set_guess_num(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 rand_num = 5;
  void clear_rand_num();
  ::PROTOBUF_NAMESPACE_ID::int64 rand_num() const;
  void set_rand_num(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_rand_num() const;
  void _internal_set_rand_num(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool player_win = 7;
  void clear_player_win();
  bool player_win() const;
  void set_player_win(bool value);
  private:
  bool _internal_player_win() const;
  void _internal_set_player_win(bool value);
  public:

  // bool is_finished = 8;
  void clear_is_finished();
  bool is_finished() const;
  void set_is_finished(bool value);
  private:
  bool _internal_is_finished() const;
  void _internal_set_is_finished(bool value);
  public:

  // @@protoc_insertion_point(class_scope:dice2.roundinfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_;
  ::PROTOBUF_NAMESPACE_ID::int64 round_;
  ::PROTOBUF_NAMESPACE_ID::int64 amount_;
  ::PROTOBUF_NAMESPACE_ID::int64 height_;
  ::PROTOBUF_NAMESPACE_ID::int64 guess_num_;
  ::PROTOBUF_NAMESPACE_ID::int64 rand_num_;
  bool player_win_;
  bool is_finished_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dice2_2eproto;
};
// -------------------------------------------------------------------

class addrinfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dice2.addrinfo) */ {
 public:
  inline addrinfo() : addrinfo(nullptr) {}
  virtual ~addrinfo();

  addrinfo(const addrinfo& from);
  addrinfo(addrinfo&& from) noexcept
    : addrinfo() {
    *this = ::std::move(from);
  }

  inline addrinfo& operator=(const addrinfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline addrinfo& operator=(addrinfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const addrinfo& default_instance();

  static inline const addrinfo* internal_default_instance() {
    return reinterpret_cast<const addrinfo*>(
               &_addrinfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(addrinfo& a, addrinfo& b) {
    a.Swap(&b);
  }
  inline void Swap(addrinfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(addrinfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline addrinfo* New() const final {
    return CreateMaybeMessage<addrinfo>(nullptr);
  }

  addrinfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<addrinfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const addrinfo& from);
  void MergeFrom(const addrinfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(addrinfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dice2.addrinfo";
  }
  protected:
  explicit addrinfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dice2_2eproto);
    return ::descriptor_table_dice2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBettingTimesFieldNumber = 1,
    kBettingAmountFieldNumber = 2,
    kEarningsFieldNumber = 3,
  };
  // int64 betting_times = 1;
  void clear_betting_times();
  ::PROTOBUF_NAMESPACE_ID::int64 betting_times() const;
  void set_betting_times(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_betting_times() const;
  void _internal_set_betting_times(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 betting_amount = 2;
  void clear_betting_amount();
  ::PROTOBUF_NAMESPACE_ID::int64 betting_amount() const;
  void set_betting_amount(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_betting_amount() const;
  void _internal_set_betting_amount(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 earnings = 3;
  void clear_earnings();
  ::PROTOBUF_NAMESPACE_ID::int64 earnings() const;
  void set_earnings(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_earnings() const;
  void _internal_set_earnings(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:dice2.addrinfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 betting_times_;
  ::PROTOBUF_NAMESPACE_ID::int64 betting_amount_;
  ::PROTOBUF_NAMESPACE_ID::int64 earnings_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dice2_2eproto;
};
// -------------------------------------------------------------------

class gamestatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dice2.gamestatus) */ {
 public:
  inline gamestatus() : gamestatus(nullptr) {}
  virtual ~gamestatus();

  gamestatus(const gamestatus& from);
  gamestatus(gamestatus&& from) noexcept
    : gamestatus() {
    *this = ::std::move(from);
  }

  inline gamestatus& operator=(const gamestatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline gamestatus& operator=(gamestatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const gamestatus& default_instance();

  static inline const gamestatus* internal_default_instance() {
    return reinterpret_cast<const gamestatus*>(
               &_gamestatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(gamestatus& a, gamestatus& b) {
    a.Swap(&b);
  }
  inline void Swap(gamestatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(gamestatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline gamestatus* New() const final {
    return CreateMaybeMessage<gamestatus>(nullptr);
  }

  gamestatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<gamestatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const gamestatus& from);
  void MergeFrom(const gamestatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(gamestatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dice2.gamestatus";
  }
  protected:
  explicit gamestatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dice2_2eproto);
    return ::descriptor_table_dice2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameCreatorFieldNumber = 1,
    kDepositFieldNumber = 2,
    kHeightFieldNumber = 3,
    kGameBalanceFieldNumber = 4,
    kCurrentRoundFieldNumber = 5,
    kFinishedRoundFieldNumber = 6,
    kTotalBetsFieldNumber = 7,
    kTotalPlayerWinFieldNumber = 8,
    kIsActiveFieldNumber = 9,
  };
  // string game_creator = 1;
  void clear_game_creator();
  const std::string& game_creator() const;
  void set_game_creator(const std::string& value);
  void set_game_creator(std::string&& value);
  void set_game_creator(const char* value);
  void set_game_creator(const char* value, size_t size);
  std::string* mutable_game_creator();
  std::string* release_game_creator();
  void set_allocated_game_creator(std::string* game_creator);
  private:
  const std::string& _internal_game_creator() const;
  void _internal_set_game_creator(const std::string& value);
  std::string* _internal_mutable_game_creator();
  public:

  // int64 deposit = 2;
  void clear_deposit();
  ::PROTOBUF_NAMESPACE_ID::int64 deposit() const;
  void set_deposit(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_deposit() const;
  void _internal_set_deposit(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 height = 3;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int64 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 game_balance = 4;
  void clear_game_balance();
  ::PROTOBUF_NAMESPACE_ID::int64 game_balance() const;
  void set_game_balance(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_game_balance() const;
  void _internal_set_game_balance(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 current_round = 5;
  void clear_current_round();
  ::PROTOBUF_NAMESPACE_ID::int64 current_round() const;
  void set_current_round(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_current_round() const;
  void _internal_set_current_round(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 finished_round = 6;
  void clear_finished_round();
  ::PROTOBUF_NAMESPACE_ID::int64 finished_round() const;
  void set_finished_round(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_finished_round() const;
  void _internal_set_finished_round(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 total_bets = 7;
  void clear_total_bets();
  ::PROTOBUF_NAMESPACE_ID::int64 total_bets() const;
  void set_total_bets(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_total_bets() const;
  void _internal_set_total_bets(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 total_player_win = 8;
  void clear_total_player_win();
  ::PROTOBUF_NAMESPACE_ID::int64 total_player_win() const;
  void set_total_player_win(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_total_player_win() const;
  void _internal_set_total_player_win(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool is_active = 9;
  void clear_is_active();
  bool is_active() const;
  void set_is_active(bool value);
  private:
  bool _internal_is_active() const;
  void _internal_set_is_active(bool value);
  public:

  // @@protoc_insertion_point(class_scope:dice2.gamestatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr game_creator_;
  ::PROTOBUF_NAMESPACE_ID::int64 deposit_;
  ::PROTOBUF_NAMESPACE_ID::int64 height_;
  ::PROTOBUF_NAMESPACE_ID::int64 game_balance_;
  ::PROTOBUF_NAMESPACE_ID::int64 current_round_;
  ::PROTOBUF_NAMESPACE_ID::int64 finished_round_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_bets_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_player_win_;
  bool is_active_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dice2_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// roundinfo

// int64 round = 1;
inline void roundinfo::clear_round() {
  round_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 roundinfo::_internal_round() const {
  return round_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 roundinfo::round() const {
  // @@protoc_insertion_point(field_get:dice2.roundinfo.round)
  return _internal_round();
}
inline void roundinfo::_internal_set_round(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  round_ = value;
}
inline void roundinfo::set_round(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_round(value);
  // @@protoc_insertion_point(field_set:dice2.roundinfo.round)
}

// int64 amount = 2;
inline void roundinfo::clear_amount() {
  amount_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 roundinfo::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 roundinfo::amount() const {
  // @@protoc_insertion_point(field_get:dice2.roundinfo.amount)
  return _internal_amount();
}
inline void roundinfo::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  amount_ = value;
}
inline void roundinfo::set_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:dice2.roundinfo.amount)
}

// int64 height = 3;
inline void roundinfo::clear_height() {
  height_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 roundinfo::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 roundinfo::height() const {
  // @@protoc_insertion_point(field_get:dice2.roundinfo.height)
  return _internal_height();
}
inline void roundinfo::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  height_ = value;
}
inline void roundinfo::set_height(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:dice2.roundinfo.height)
}

// int64 guess_num = 4;
inline void roundinfo::clear_guess_num() {
  guess_num_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 roundinfo::_internal_guess_num() const {
  return guess_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 roundinfo::guess_num() const {
  // @@protoc_insertion_point(field_get:dice2.roundinfo.guess_num)
  return _internal_guess_num();
}
inline void roundinfo::_internal_set_guess_num(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  guess_num_ = value;
}
inline void roundinfo::set_guess_num(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_guess_num(value);
  // @@protoc_insertion_point(field_set:dice2.roundinfo.guess_num)
}

// int64 rand_num = 5;
inline void roundinfo::clear_rand_num() {
  rand_num_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 roundinfo::_internal_rand_num() const {
  return rand_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 roundinfo::rand_num() const {
  // @@protoc_insertion_point(field_get:dice2.roundinfo.rand_num)
  return _internal_rand_num();
}
inline void roundinfo::_internal_set_rand_num(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  rand_num_ = value;
}
inline void roundinfo::set_rand_num(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_rand_num(value);
  // @@protoc_insertion_point(field_set:dice2.roundinfo.rand_num)
}

// string player = 6;
inline void roundinfo::clear_player() {
  player_.ClearToEmpty();
}
inline const std::string& roundinfo::player() const {
  // @@protoc_insertion_point(field_get:dice2.roundinfo.player)
  return _internal_player();
}
inline void roundinfo::set_player(const std::string& value) {
  _internal_set_player(value);
  // @@protoc_insertion_point(field_set:dice2.roundinfo.player)
}
inline std::string* roundinfo::mutable_player() {
  // @@protoc_insertion_point(field_mutable:dice2.roundinfo.player)
  return _internal_mutable_player();
}
inline const std::string& roundinfo::_internal_player() const {
  return player_.Get();
}
inline void roundinfo::_internal_set_player(const std::string& value) {
  
  player_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void roundinfo::set_player(std::string&& value) {
  
  player_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dice2.roundinfo.player)
}
inline void roundinfo::set_player(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  player_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:dice2.roundinfo.player)
}
inline void roundinfo::set_player(const char* value,
    size_t size) {
  
  player_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dice2.roundinfo.player)
}
inline std::string* roundinfo::_internal_mutable_player() {
  
  return player_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* roundinfo::release_player() {
  // @@protoc_insertion_point(field_release:dice2.roundinfo.player)
  return player_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void roundinfo::set_allocated_player(std::string* player) {
  if (player != nullptr) {
    
  } else {
    
  }
  player_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), player,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dice2.roundinfo.player)
}

// bool player_win = 7;
inline void roundinfo::clear_player_win() {
  player_win_ = false;
}
inline bool roundinfo::_internal_player_win() const {
  return player_win_;
}
inline bool roundinfo::player_win() const {
  // @@protoc_insertion_point(field_get:dice2.roundinfo.player_win)
  return _internal_player_win();
}
inline void roundinfo::_internal_set_player_win(bool value) {
  
  player_win_ = value;
}
inline void roundinfo::set_player_win(bool value) {
  _internal_set_player_win(value);
  // @@protoc_insertion_point(field_set:dice2.roundinfo.player_win)
}

// bool is_finished = 8;
inline void roundinfo::clear_is_finished() {
  is_finished_ = false;
}
inline bool roundinfo::_internal_is_finished() const {
  return is_finished_;
}
inline bool roundinfo::is_finished() const {
  // @@protoc_insertion_point(field_get:dice2.roundinfo.is_finished)
  return _internal_is_finished();
}
inline void roundinfo::_internal_set_is_finished(bool value) {
  
  is_finished_ = value;
}
inline void roundinfo::set_is_finished(bool value) {
  _internal_set_is_finished(value);
  // @@protoc_insertion_point(field_set:dice2.roundinfo.is_finished)
}

// -------------------------------------------------------------------

// addrinfo

// int64 betting_times = 1;
inline void addrinfo::clear_betting_times() {
  betting_times_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 addrinfo::_internal_betting_times() const {
  return betting_times_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 addrinfo::betting_times() const {
  // @@protoc_insertion_point(field_get:dice2.addrinfo.betting_times)
  return _internal_betting_times();
}
inline void addrinfo::_internal_set_betting_times(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  betting_times_ = value;
}
inline void addrinfo::set_betting_times(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_betting_times(value);
  // @@protoc_insertion_point(field_set:dice2.addrinfo.betting_times)
}

// int64 betting_amount = 2;
inline void addrinfo::clear_betting_amount() {
  betting_amount_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 addrinfo::_internal_betting_amount() const {
  return betting_amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 addrinfo::betting_amount() const {
  // @@protoc_insertion_point(field_get:dice2.addrinfo.betting_amount)
  return _internal_betting_amount();
}
inline void addrinfo::_internal_set_betting_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  betting_amount_ = value;
}
inline void addrinfo::set_betting_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_betting_amount(value);
  // @@protoc_insertion_point(field_set:dice2.addrinfo.betting_amount)
}

// int64 earnings = 3;
inline void addrinfo::clear_earnings() {
  earnings_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 addrinfo::_internal_earnings() const {
  return earnings_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 addrinfo::earnings() const {
  // @@protoc_insertion_point(field_get:dice2.addrinfo.earnings)
  return _internal_earnings();
}
inline void addrinfo::_internal_set_earnings(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  earnings_ = value;
}
inline void addrinfo::set_earnings(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_earnings(value);
  // @@protoc_insertion_point(field_set:dice2.addrinfo.earnings)
}

// -------------------------------------------------------------------

// gamestatus

// string game_creator = 1;
inline void gamestatus::clear_game_creator() {
  game_creator_.ClearToEmpty();
}
inline const std::string& gamestatus::game_creator() const {
  // @@protoc_insertion_point(field_get:dice2.gamestatus.game_creator)
  return _internal_game_creator();
}
inline void gamestatus::set_game_creator(const std::string& value) {
  _internal_set_game_creator(value);
  // @@protoc_insertion_point(field_set:dice2.gamestatus.game_creator)
}
inline std::string* gamestatus::mutable_game_creator() {
  // @@protoc_insertion_point(field_mutable:dice2.gamestatus.game_creator)
  return _internal_mutable_game_creator();
}
inline const std::string& gamestatus::_internal_game_creator() const {
  return game_creator_.Get();
}
inline void gamestatus::_internal_set_game_creator(const std::string& value) {
  
  game_creator_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void gamestatus::set_game_creator(std::string&& value) {
  
  game_creator_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dice2.gamestatus.game_creator)
}
inline void gamestatus::set_game_creator(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  game_creator_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:dice2.gamestatus.game_creator)
}
inline void gamestatus::set_game_creator(const char* value,
    size_t size) {
  
  game_creator_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dice2.gamestatus.game_creator)
}
inline std::string* gamestatus::_internal_mutable_game_creator() {
  
  return game_creator_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* gamestatus::release_game_creator() {
  // @@protoc_insertion_point(field_release:dice2.gamestatus.game_creator)
  return game_creator_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void gamestatus::set_allocated_game_creator(std::string* game_creator) {
  if (game_creator != nullptr) {
    
  } else {
    
  }
  game_creator_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), game_creator,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dice2.gamestatus.game_creator)
}

// int64 deposit = 2;
inline void gamestatus::clear_deposit() {
  deposit_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 gamestatus::_internal_deposit() const {
  return deposit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 gamestatus::deposit() const {
  // @@protoc_insertion_point(field_get:dice2.gamestatus.deposit)
  return _internal_deposit();
}
inline void gamestatus::_internal_set_deposit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  deposit_ = value;
}
inline void gamestatus::set_deposit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_deposit(value);
  // @@protoc_insertion_point(field_set:dice2.gamestatus.deposit)
}

// int64 height = 3;
inline void gamestatus::clear_height() {
  height_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 gamestatus::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 gamestatus::height() const {
  // @@protoc_insertion_point(field_get:dice2.gamestatus.height)
  return _internal_height();
}
inline void gamestatus::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  height_ = value;
}
inline void gamestatus::set_height(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:dice2.gamestatus.height)
}

// int64 game_balance = 4;
inline void gamestatus::clear_game_balance() {
  game_balance_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 gamestatus::_internal_game_balance() const {
  return game_balance_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 gamestatus::game_balance() const {
  // @@protoc_insertion_point(field_get:dice2.gamestatus.game_balance)
  return _internal_game_balance();
}
inline void gamestatus::_internal_set_game_balance(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  game_balance_ = value;
}
inline void gamestatus::set_game_balance(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_game_balance(value);
  // @@protoc_insertion_point(field_set:dice2.gamestatus.game_balance)
}

// int64 current_round = 5;
inline void gamestatus::clear_current_round() {
  current_round_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 gamestatus::_internal_current_round() const {
  return current_round_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 gamestatus::current_round() const {
  // @@protoc_insertion_point(field_get:dice2.gamestatus.current_round)
  return _internal_current_round();
}
inline void gamestatus::_internal_set_current_round(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  current_round_ = value;
}
inline void gamestatus::set_current_round(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_current_round(value);
  // @@protoc_insertion_point(field_set:dice2.gamestatus.current_round)
}

// int64 finished_round = 6;
inline void gamestatus::clear_finished_round() {
  finished_round_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 gamestatus::_internal_finished_round() const {
  return finished_round_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 gamestatus::finished_round() const {
  // @@protoc_insertion_point(field_get:dice2.gamestatus.finished_round)
  return _internal_finished_round();
}
inline void gamestatus::_internal_set_finished_round(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  finished_round_ = value;
}
inline void gamestatus::set_finished_round(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_finished_round(value);
  // @@protoc_insertion_point(field_set:dice2.gamestatus.finished_round)
}

// int64 total_bets = 7;
inline void gamestatus::clear_total_bets() {
  total_bets_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 gamestatus::_internal_total_bets() const {
  return total_bets_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 gamestatus::total_bets() const {
  // @@protoc_insertion_point(field_get:dice2.gamestatus.total_bets)
  return _internal_total_bets();
}
inline void gamestatus::_internal_set_total_bets(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  total_bets_ = value;
}
inline void gamestatus::set_total_bets(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_total_bets(value);
  // @@protoc_insertion_point(field_set:dice2.gamestatus.total_bets)
}

// int64 total_player_win = 8;
inline void gamestatus::clear_total_player_win() {
  total_player_win_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 gamestatus::_internal_total_player_win() const {
  return total_player_win_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 gamestatus::total_player_win() const {
  // @@protoc_insertion_point(field_get:dice2.gamestatus.total_player_win)
  return _internal_total_player_win();
}
inline void gamestatus::_internal_set_total_player_win(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  total_player_win_ = value;
}
inline void gamestatus::set_total_player_win(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_total_player_win(value);
  // @@protoc_insertion_point(field_set:dice2.gamestatus.total_player_win)
}

// bool is_active = 9;
inline void gamestatus::clear_is_active() {
  is_active_ = false;
}
inline bool gamestatus::_internal_is_active() const {
  return is_active_;
}
inline bool gamestatus::is_active() const {
  // @@protoc_insertion_point(field_get:dice2.gamestatus.is_active)
  return _internal_is_active();
}
inline void gamestatus::_internal_set_is_active(bool value) {
  
  is_active_ = value;
}
inline void gamestatus::set_is_active(bool value) {
  _internal_set_is_active(value);
  // @@protoc_insertion_point(field_set:dice2.gamestatus.is_active)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dice2

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dice2_2eproto
