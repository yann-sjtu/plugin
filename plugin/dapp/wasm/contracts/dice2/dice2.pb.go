// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dice2.proto

package dice2

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Roundinfo struct {
	Round                int64    `protobuf:"varint,1,opt,name=round,proto3" json:"round,omitempty"`
	Amount               int64    `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Height               int64    `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	GuessNum             int64    `protobuf:"varint,4,opt,name=guess_num,json=guessNum,proto3" json:"guess_num,omitempty"`
	RandNum              int64    `protobuf:"varint,5,opt,name=rand_num,json=randNum,proto3" json:"rand_num,omitempty"`
	Player               string   `protobuf:"bytes,6,opt,name=player,proto3" json:"player,omitempty"`
	PlayerWin            bool     `protobuf:"varint,7,opt,name=player_win,json=playerWin,proto3" json:"player_win,omitempty"`
	IsFinished           bool     `protobuf:"varint,8,opt,name=is_finished,json=isFinished,proto3" json:"is_finished,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Roundinfo) Reset()         { *m = Roundinfo{} }
func (m *Roundinfo) String() string { return proto.CompactTextString(m) }
func (*Roundinfo) ProtoMessage()    {}
func (*Roundinfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_90e38d452dc4b789, []int{0}
}

func (m *Roundinfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Roundinfo.Unmarshal(m, b)
}
func (m *Roundinfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Roundinfo.Marshal(b, m, deterministic)
}
func (m *Roundinfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Roundinfo.Merge(m, src)
}
func (m *Roundinfo) XXX_Size() int {
	return xxx_messageInfo_Roundinfo.Size(m)
}
func (m *Roundinfo) XXX_DiscardUnknown() {
	xxx_messageInfo_Roundinfo.DiscardUnknown(m)
}

var xxx_messageInfo_Roundinfo proto.InternalMessageInfo

func (m *Roundinfo) GetRound() int64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *Roundinfo) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *Roundinfo) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Roundinfo) GetGuessNum() int64 {
	if m != nil {
		return m.GuessNum
	}
	return 0
}

func (m *Roundinfo) GetRandNum() int64 {
	if m != nil {
		return m.RandNum
	}
	return 0
}

func (m *Roundinfo) GetPlayer() string {
	if m != nil {
		return m.Player
	}
	return ""
}

func (m *Roundinfo) GetPlayerWin() bool {
	if m != nil {
		return m.PlayerWin
	}
	return false
}

func (m *Roundinfo) GetIsFinished() bool {
	if m != nil {
		return m.IsFinished
	}
	return false
}

type Addrinfo struct {
	BettingTimes         int64    `protobuf:"varint,1,opt,name=betting_times,json=bettingTimes,proto3" json:"betting_times,omitempty"`
	BettingAmount        int64    `protobuf:"varint,2,opt,name=betting_amount,json=bettingAmount,proto3" json:"betting_amount,omitempty"`
	Earnings             int64    `protobuf:"varint,3,opt,name=earnings,proto3" json:"earnings,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Addrinfo) Reset()         { *m = Addrinfo{} }
func (m *Addrinfo) String() string { return proto.CompactTextString(m) }
func (*Addrinfo) ProtoMessage()    {}
func (*Addrinfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_90e38d452dc4b789, []int{1}
}

func (m *Addrinfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Addrinfo.Unmarshal(m, b)
}
func (m *Addrinfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Addrinfo.Marshal(b, m, deterministic)
}
func (m *Addrinfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Addrinfo.Merge(m, src)
}
func (m *Addrinfo) XXX_Size() int {
	return xxx_messageInfo_Addrinfo.Size(m)
}
func (m *Addrinfo) XXX_DiscardUnknown() {
	xxx_messageInfo_Addrinfo.DiscardUnknown(m)
}

var xxx_messageInfo_Addrinfo proto.InternalMessageInfo

func (m *Addrinfo) GetBettingTimes() int64 {
	if m != nil {
		return m.BettingTimes
	}
	return 0
}

func (m *Addrinfo) GetBettingAmount() int64 {
	if m != nil {
		return m.BettingAmount
	}
	return 0
}

func (m *Addrinfo) GetEarnings() int64 {
	if m != nil {
		return m.Earnings
	}
	return 0
}

type Gamestatus struct {
	GameCreator          string   `protobuf:"bytes,1,opt,name=game_creator,json=gameCreator,proto3" json:"game_creator,omitempty"`
	Deposit              int64    `protobuf:"varint,2,opt,name=deposit,proto3" json:"deposit,omitempty"`
	Height               int64    `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	GameBalance          int64    `protobuf:"varint,4,opt,name=game_balance,json=gameBalance,proto3" json:"game_balance,omitempty"`
	CurrentRound         int64    `protobuf:"varint,5,opt,name=current_round,json=currentRound,proto3" json:"current_round,omitempty"`
	FinishedRound        int64    `protobuf:"varint,6,opt,name=finished_round,json=finishedRound,proto3" json:"finished_round,omitempty"`
	TotalBets            int64    `protobuf:"varint,7,opt,name=total_bets,json=totalBets,proto3" json:"total_bets,omitempty"`
	TotalPlayerWin       int64    `protobuf:"varint,8,opt,name=total_player_win,json=totalPlayerWin,proto3" json:"total_player_win,omitempty"`
	IsActive             bool     `protobuf:"varint,9,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Gamestatus) Reset()         { *m = Gamestatus{} }
func (m *Gamestatus) String() string { return proto.CompactTextString(m) }
func (*Gamestatus) ProtoMessage()    {}
func (*Gamestatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_90e38d452dc4b789, []int{2}
}

func (m *Gamestatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Gamestatus.Unmarshal(m, b)
}
func (m *Gamestatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Gamestatus.Marshal(b, m, deterministic)
}
func (m *Gamestatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Gamestatus.Merge(m, src)
}
func (m *Gamestatus) XXX_Size() int {
	return xxx_messageInfo_Gamestatus.Size(m)
}
func (m *Gamestatus) XXX_DiscardUnknown() {
	xxx_messageInfo_Gamestatus.DiscardUnknown(m)
}

var xxx_messageInfo_Gamestatus proto.InternalMessageInfo

func (m *Gamestatus) GetGameCreator() string {
	if m != nil {
		return m.GameCreator
	}
	return ""
}

func (m *Gamestatus) GetDeposit() int64 {
	if m != nil {
		return m.Deposit
	}
	return 0
}

func (m *Gamestatus) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Gamestatus) GetGameBalance() int64 {
	if m != nil {
		return m.GameBalance
	}
	return 0
}

func (m *Gamestatus) GetCurrentRound() int64 {
	if m != nil {
		return m.CurrentRound
	}
	return 0
}

func (m *Gamestatus) GetFinishedRound() int64 {
	if m != nil {
		return m.FinishedRound
	}
	return 0
}

func (m *Gamestatus) GetTotalBets() int64 {
	if m != nil {
		return m.TotalBets
	}
	return 0
}

func (m *Gamestatus) GetTotalPlayerWin() int64 {
	if m != nil {
		return m.TotalPlayerWin
	}
	return 0
}

func (m *Gamestatus) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func init() {
	proto.RegisterType((*Roundinfo)(nil), "dice2.roundinfo")
	proto.RegisterType((*Addrinfo)(nil), "dice2.addrinfo")
	proto.RegisterType((*Gamestatus)(nil), "dice2.gamestatus")
}

func init() { proto.RegisterFile("dice2.proto", fileDescriptor_90e38d452dc4b789) }

var fileDescriptor_90e38d452dc4b789 = []byte{
	// 394 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xd1, 0x8a, 0xd4, 0x30,
	0x14, 0x86, 0xe9, 0x8e, 0xd3, 0x69, 0xce, 0x8c, 0x83, 0x04, 0x59, 0xa2, 0xcb, 0xe2, 0x38, 0xb2,
	0x30, 0x57, 0x5e, 0xe8, 0x13, 0xec, 0x0a, 0x5e, 0x8a, 0x14, 0xc1, 0xcb, 0x90, 0xb6, 0x67, 0x3b,
	0x07, 0xa6, 0xc9, 0x90, 0xa4, 0x8a, 0x2f, 0xe6, 0xfb, 0xf8, 0x26, 0xd2, 0x93, 0x74, 0xd0, 0x8b,
	0xbd, 0xeb, 0xff, 0xfd, 0xa7, 0x09, 0xff, 0xf9, 0x03, 0xeb, 0x8e, 0x5a, 0xfc, 0xf0, 0xfe, 0xec,
	0x5d, 0x74, 0x72, 0xc9, 0x62, 0xff, 0xa7, 0x00, 0xe1, 0xdd, 0x68, 0x3b, 0xb2, 0x8f, 0x4e, 0xbe,
	0x84, 0x25, 0x0b, 0x55, 0xec, 0x8a, 0xc3, 0xa2, 0x4e, 0x42, 0x5e, 0x43, 0x69, 0x06, 0x37, 0xda,
	0xa8, 0xae, 0x18, 0x67, 0x35, 0xf1, 0x23, 0x52, 0x7f, 0x8c, 0x6a, 0x91, 0x78, 0x52, 0xf2, 0x06,
	0x44, 0x3f, 0x62, 0x08, 0xda, 0x8e, 0x83, 0x7a, 0xc6, 0x56, 0xc5, 0xe0, 0xcb, 0x38, 0xc8, 0x57,
	0x50, 0x79, 0x63, 0x3b, 0xf6, 0x96, 0xec, 0xad, 0x26, 0x3d, 0x59, 0xd7, 0x50, 0x9e, 0x4f, 0xe6,
	0x17, 0x7a, 0x55, 0xee, 0x8a, 0x83, 0xa8, 0xb3, 0x92, 0xb7, 0x00, 0xe9, 0x4b, 0xff, 0x24, 0xab,
	0x56, 0xbb, 0xe2, 0x50, 0xd5, 0x22, 0x91, 0xef, 0x64, 0xe5, 0x1b, 0x58, 0x53, 0xd0, 0x8f, 0x64,
	0x29, 0x1c, 0xb1, 0x53, 0x15, 0xfb, 0x40, 0xe1, 0x73, 0x26, 0x7b, 0x0f, 0x95, 0xe9, 0x3a, 0xcf,
	0x09, 0xdf, 0xc1, 0xf3, 0x06, 0x63, 0x24, 0xdb, 0xeb, 0x48, 0x03, 0x86, 0x9c, 0x74, 0x93, 0xe1,
	0xb7, 0x89, 0xc9, 0x3b, 0xd8, 0xce, 0x43, 0xff, 0x05, 0x9f, 0x7f, 0xbd, 0x4f, 0xf9, 0x5f, 0x43,
	0x85, 0xc6, 0x5b, 0xb2, 0x7d, 0xc8, 0x1b, 0xb8, 0xe8, 0xfd, 0xef, 0x2b, 0x80, 0xde, 0x0c, 0x18,
	0xa2, 0x89, 0x63, 0x90, 0x6f, 0x61, 0x33, 0x29, 0xdd, 0x7a, 0x34, 0xd1, 0x79, 0xbe, 0x55, 0xd4,
	0xeb, 0x89, 0x7d, 0x4a, 0x48, 0x2a, 0x58, 0x75, 0x78, 0x76, 0x81, 0xe6, 0xdb, 0x66, 0xf9, 0xe4,
	0x9e, 0xe7, 0x43, 0x1b, 0x73, 0x32, 0xb6, 0xc5, 0xbc, 0x6a, 0x3e, 0xf4, 0x21, 0xa1, 0x29, 0x6e,
	0x3b, 0x7a, 0x8f, 0x36, 0xea, 0x54, 0x6c, 0x5a, 0xf9, 0x26, 0xc3, 0x9a, 0xfb, 0xbd, 0x83, 0xed,
	0xbc, 0xbd, 0x3c, 0x55, 0xa6, 0xb8, 0x33, 0x4d, 0x63, 0xb7, 0x00, 0xd1, 0x45, 0x73, 0xd2, 0x0d,
	0xc6, 0xc0, 0x35, 0x2c, 0x6a, 0xc1, 0xe4, 0x01, 0x63, 0x90, 0x07, 0x78, 0x91, 0xec, 0x7f, 0xba,
	0xaa, 0x78, 0x68, 0xcb, 0xfc, 0xeb, 0xa5, 0xb0, 0x1b, 0x10, 0x14, 0xb4, 0x69, 0x23, 0xfd, 0x40,
	0x25, 0xb8, 0xae, 0x8a, 0xc2, 0x3d, 0xeb, 0xa6, 0xe4, 0xe7, 0xf9, 0xf1, 0x6f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x24, 0xf1, 0x0e, 0xb6, 0xad, 0x02, 0x00, 0x00,
}
