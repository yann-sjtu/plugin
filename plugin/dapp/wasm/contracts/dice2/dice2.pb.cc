// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dice2.proto

#include "dice2.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace dice2 {
class roundinfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<roundinfo> _instance;
} _roundinfo_default_instance_;
class addrinfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<addrinfo> _instance;
} _addrinfo_default_instance_;
class gamestatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<gamestatus> _instance;
} _gamestatus_default_instance_;
}  // namespace dice2
static void InitDefaultsscc_info_addrinfo_dice2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dice2::_addrinfo_default_instance_;
    new (ptr) ::dice2::addrinfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_addrinfo_dice2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_addrinfo_dice2_2eproto}, {}};

static void InitDefaultsscc_info_gamestatus_dice2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dice2::_gamestatus_default_instance_;
    new (ptr) ::dice2::gamestatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_gamestatus_dice2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_gamestatus_dice2_2eproto}, {}};

static void InitDefaultsscc_info_roundinfo_dice2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dice2::_roundinfo_default_instance_;
    new (ptr) ::dice2::roundinfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_roundinfo_dice2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_roundinfo_dice2_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_dice2_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_dice2_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_dice2_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_dice2_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dice2::roundinfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dice2::roundinfo, round_),
  PROTOBUF_FIELD_OFFSET(::dice2::roundinfo, amount_),
  PROTOBUF_FIELD_OFFSET(::dice2::roundinfo, height_),
  PROTOBUF_FIELD_OFFSET(::dice2::roundinfo, guess_num_),
  PROTOBUF_FIELD_OFFSET(::dice2::roundinfo, rand_num_),
  PROTOBUF_FIELD_OFFSET(::dice2::roundinfo, player_),
  PROTOBUF_FIELD_OFFSET(::dice2::roundinfo, player_win_),
  PROTOBUF_FIELD_OFFSET(::dice2::roundinfo, is_finished_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dice2::addrinfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dice2::addrinfo, betting_times_),
  PROTOBUF_FIELD_OFFSET(::dice2::addrinfo, betting_amount_),
  PROTOBUF_FIELD_OFFSET(::dice2::addrinfo, earnings_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dice2::gamestatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dice2::gamestatus, game_creator_),
  PROTOBUF_FIELD_OFFSET(::dice2::gamestatus, deposit_),
  PROTOBUF_FIELD_OFFSET(::dice2::gamestatus, height_),
  PROTOBUF_FIELD_OFFSET(::dice2::gamestatus, game_balance_),
  PROTOBUF_FIELD_OFFSET(::dice2::gamestatus, current_round_),
  PROTOBUF_FIELD_OFFSET(::dice2::gamestatus, finished_round_),
  PROTOBUF_FIELD_OFFSET(::dice2::gamestatus, total_bets_),
  PROTOBUF_FIELD_OFFSET(::dice2::gamestatus, total_player_win_),
  PROTOBUF_FIELD_OFFSET(::dice2::gamestatus, is_active_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::dice2::roundinfo)},
  { 13, -1, sizeof(::dice2::addrinfo)},
  { 21, -1, sizeof(::dice2::gamestatus)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dice2::_roundinfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dice2::_addrinfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dice2::_gamestatus_default_instance_),
};

const char descriptor_table_protodef_dice2_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013dice2.proto\022\005dice2\"\230\001\n\troundinfo\022\r\n\005ro"
  "und\030\001 \001(\003\022\016\n\006amount\030\002 \001(\003\022\016\n\006height\030\003 \001("
  "\003\022\021\n\tguess_num\030\004 \001(\003\022\020\n\010rand_num\030\005 \001(\003\022\016"
  "\n\006player\030\006 \001(\t\022\022\n\nplayer_win\030\007 \001(\010\022\023\n\013is"
  "_finished\030\010 \001(\010\"K\n\010addrinfo\022\025\n\rbetting_t"
  "imes\030\001 \001(\003\022\026\n\016betting_amount\030\002 \001(\003\022\020\n\010ea"
  "rnings\030\003 \001(\003\"\311\001\n\ngamestatus\022\024\n\014game_crea"
  "tor\030\001 \001(\t\022\017\n\007deposit\030\002 \001(\003\022\016\n\006height\030\003 \001"
  "(\003\022\024\n\014game_balance\030\004 \001(\003\022\025\n\rcurrent_roun"
  "d\030\005 \001(\003\022\026\n\016finished_round\030\006 \001(\003\022\022\n\ntotal"
  "_bets\030\007 \001(\003\022\030\n\020total_player_win\030\010 \001(\003\022\021\n"
  "\tis_active\030\t \001(\010b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_dice2_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_dice2_2eproto_sccs[3] = {
  &scc_info_addrinfo_dice2_2eproto.base,
  &scc_info_gamestatus_dice2_2eproto.base,
  &scc_info_roundinfo_dice2_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_dice2_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dice2_2eproto = {
  false, false, descriptor_table_protodef_dice2_2eproto, "dice2.proto", 464,
  &descriptor_table_dice2_2eproto_once, descriptor_table_dice2_2eproto_sccs, descriptor_table_dice2_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_dice2_2eproto::offsets,
  file_level_metadata_dice2_2eproto, 3, file_level_enum_descriptors_dice2_2eproto, file_level_service_descriptors_dice2_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_dice2_2eproto(&descriptor_table_dice2_2eproto);
namespace dice2 {

// ===================================================================

class roundinfo::_Internal {
 public:
};

roundinfo::roundinfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dice2.roundinfo)
}
roundinfo::roundinfo(const roundinfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  player_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_player().empty()) {
    player_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_player(), 
      GetArena());
  }
  ::memcpy(&round_, &from.round_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_finished_) -
    reinterpret_cast<char*>(&round_)) + sizeof(is_finished_));
  // @@protoc_insertion_point(copy_constructor:dice2.roundinfo)
}

void roundinfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_roundinfo_dice2_2eproto.base);
  player_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&round_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&is_finished_) -
      reinterpret_cast<char*>(&round_)) + sizeof(is_finished_));
}

roundinfo::~roundinfo() {
  // @@protoc_insertion_point(destructor:dice2.roundinfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void roundinfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  player_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void roundinfo::ArenaDtor(void* object) {
  roundinfo* _this = reinterpret_cast< roundinfo* >(object);
  (void)_this;
}
void roundinfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void roundinfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const roundinfo& roundinfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_roundinfo_dice2_2eproto.base);
  return *internal_default_instance();
}


void roundinfo::Clear() {
// @@protoc_insertion_point(message_clear_start:dice2.roundinfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_.ClearToEmpty();
  ::memset(&round_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_finished_) -
      reinterpret_cast<char*>(&round_)) + sizeof(is_finished_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* roundinfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 round = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 guess_num = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          guess_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 rand_num = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          rand_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string player = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_player();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dice2.roundinfo.player"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool player_win = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          player_win_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_finished = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          is_finished_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* roundinfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dice2.roundinfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 round = 1;
  if (this->round() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_round(), target);
  }

  // int64 amount = 2;
  if (this->amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_amount(), target);
  }

  // int64 height = 3;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_height(), target);
  }

  // int64 guess_num = 4;
  if (this->guess_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_guess_num(), target);
  }

  // int64 rand_num = 5;
  if (this->rand_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_rand_num(), target);
  }

  // string player = 6;
  if (this->player().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_player().data(), static_cast<int>(this->_internal_player().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dice2.roundinfo.player");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_player(), target);
  }

  // bool player_win = 7;
  if (this->player_win() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_player_win(), target);
  }

  // bool is_finished = 8;
  if (this->is_finished() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_is_finished(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dice2.roundinfo)
  return target;
}

size_t roundinfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dice2.roundinfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string player = 6;
  if (this->player().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_player());
  }

  // int64 round = 1;
  if (this->round() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_round());
  }

  // int64 amount = 2;
  if (this->amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_amount());
  }

  // int64 height = 3;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_height());
  }

  // int64 guess_num = 4;
  if (this->guess_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_guess_num());
  }

  // int64 rand_num = 5;
  if (this->rand_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_rand_num());
  }

  // bool player_win = 7;
  if (this->player_win() != 0) {
    total_size += 1 + 1;
  }

  // bool is_finished = 8;
  if (this->is_finished() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void roundinfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dice2.roundinfo)
  GOOGLE_DCHECK_NE(&from, this);
  const roundinfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<roundinfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dice2.roundinfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dice2.roundinfo)
    MergeFrom(*source);
  }
}

void roundinfo::MergeFrom(const roundinfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dice2.roundinfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.player().size() > 0) {
    _internal_set_player(from._internal_player());
  }
  if (from.round() != 0) {
    _internal_set_round(from._internal_round());
  }
  if (from.amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from.guess_num() != 0) {
    _internal_set_guess_num(from._internal_guess_num());
  }
  if (from.rand_num() != 0) {
    _internal_set_rand_num(from._internal_rand_num());
  }
  if (from.player_win() != 0) {
    _internal_set_player_win(from._internal_player_win());
  }
  if (from.is_finished() != 0) {
    _internal_set_is_finished(from._internal_is_finished());
  }
}

void roundinfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dice2.roundinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void roundinfo::CopyFrom(const roundinfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dice2.roundinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool roundinfo::IsInitialized() const {
  return true;
}

void roundinfo::InternalSwap(roundinfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  player_.Swap(&other->player_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(roundinfo, is_finished_)
      + sizeof(roundinfo::is_finished_)
      - PROTOBUF_FIELD_OFFSET(roundinfo, round_)>(
          reinterpret_cast<char*>(&round_),
          reinterpret_cast<char*>(&other->round_));
}

::PROTOBUF_NAMESPACE_ID::Metadata roundinfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class addrinfo::_Internal {
 public:
};

addrinfo::addrinfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dice2.addrinfo)
}
addrinfo::addrinfo(const addrinfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&betting_times_, &from.betting_times_,
    static_cast<size_t>(reinterpret_cast<char*>(&earnings_) -
    reinterpret_cast<char*>(&betting_times_)) + sizeof(earnings_));
  // @@protoc_insertion_point(copy_constructor:dice2.addrinfo)
}

void addrinfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&betting_times_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&earnings_) -
      reinterpret_cast<char*>(&betting_times_)) + sizeof(earnings_));
}

addrinfo::~addrinfo() {
  // @@protoc_insertion_point(destructor:dice2.addrinfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void addrinfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void addrinfo::ArenaDtor(void* object) {
  addrinfo* _this = reinterpret_cast< addrinfo* >(object);
  (void)_this;
}
void addrinfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void addrinfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const addrinfo& addrinfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_addrinfo_dice2_2eproto.base);
  return *internal_default_instance();
}


void addrinfo::Clear() {
// @@protoc_insertion_point(message_clear_start:dice2.addrinfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&betting_times_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&earnings_) -
      reinterpret_cast<char*>(&betting_times_)) + sizeof(earnings_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* addrinfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 betting_times = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          betting_times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 betting_amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          betting_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 earnings = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          earnings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* addrinfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dice2.addrinfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 betting_times = 1;
  if (this->betting_times() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_betting_times(), target);
  }

  // int64 betting_amount = 2;
  if (this->betting_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_betting_amount(), target);
  }

  // int64 earnings = 3;
  if (this->earnings() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_earnings(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dice2.addrinfo)
  return target;
}

size_t addrinfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dice2.addrinfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 betting_times = 1;
  if (this->betting_times() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_betting_times());
  }

  // int64 betting_amount = 2;
  if (this->betting_amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_betting_amount());
  }

  // int64 earnings = 3;
  if (this->earnings() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_earnings());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void addrinfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dice2.addrinfo)
  GOOGLE_DCHECK_NE(&from, this);
  const addrinfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<addrinfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dice2.addrinfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dice2.addrinfo)
    MergeFrom(*source);
  }
}

void addrinfo::MergeFrom(const addrinfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dice2.addrinfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.betting_times() != 0) {
    _internal_set_betting_times(from._internal_betting_times());
  }
  if (from.betting_amount() != 0) {
    _internal_set_betting_amount(from._internal_betting_amount());
  }
  if (from.earnings() != 0) {
    _internal_set_earnings(from._internal_earnings());
  }
}

void addrinfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dice2.addrinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void addrinfo::CopyFrom(const addrinfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dice2.addrinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool addrinfo::IsInitialized() const {
  return true;
}

void addrinfo::InternalSwap(addrinfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(addrinfo, earnings_)
      + sizeof(addrinfo::earnings_)
      - PROTOBUF_FIELD_OFFSET(addrinfo, betting_times_)>(
          reinterpret_cast<char*>(&betting_times_),
          reinterpret_cast<char*>(&other->betting_times_));
}

::PROTOBUF_NAMESPACE_ID::Metadata addrinfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class gamestatus::_Internal {
 public:
};

gamestatus::gamestatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dice2.gamestatus)
}
gamestatus::gamestatus(const gamestatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  game_creator_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_game_creator().empty()) {
    game_creator_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_game_creator(), 
      GetArena());
  }
  ::memcpy(&deposit_, &from.deposit_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_active_) -
    reinterpret_cast<char*>(&deposit_)) + sizeof(is_active_));
  // @@protoc_insertion_point(copy_constructor:dice2.gamestatus)
}

void gamestatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_gamestatus_dice2_2eproto.base);
  game_creator_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&deposit_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&is_active_) -
      reinterpret_cast<char*>(&deposit_)) + sizeof(is_active_));
}

gamestatus::~gamestatus() {
  // @@protoc_insertion_point(destructor:dice2.gamestatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void gamestatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  game_creator_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void gamestatus::ArenaDtor(void* object) {
  gamestatus* _this = reinterpret_cast< gamestatus* >(object);
  (void)_this;
}
void gamestatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void gamestatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const gamestatus& gamestatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_gamestatus_dice2_2eproto.base);
  return *internal_default_instance();
}


void gamestatus::Clear() {
// @@protoc_insertion_point(message_clear_start:dice2.gamestatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  game_creator_.ClearToEmpty();
  ::memset(&deposit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_active_) -
      reinterpret_cast<char*>(&deposit_)) + sizeof(is_active_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* gamestatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string game_creator = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_game_creator();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dice2.gamestatus.game_creator"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 deposit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          deposit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 game_balance = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          game_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 current_round = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          current_round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 finished_round = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          finished_round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 total_bets = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          total_bets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 total_player_win = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          total_player_win_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_active = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          is_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* gamestatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dice2.gamestatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string game_creator = 1;
  if (this->game_creator().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_game_creator().data(), static_cast<int>(this->_internal_game_creator().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dice2.gamestatus.game_creator");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_game_creator(), target);
  }

  // int64 deposit = 2;
  if (this->deposit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_deposit(), target);
  }

  // int64 height = 3;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_height(), target);
  }

  // int64 game_balance = 4;
  if (this->game_balance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_game_balance(), target);
  }

  // int64 current_round = 5;
  if (this->current_round() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_current_round(), target);
  }

  // int64 finished_round = 6;
  if (this->finished_round() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_finished_round(), target);
  }

  // int64 total_bets = 7;
  if (this->total_bets() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_total_bets(), target);
  }

  // int64 total_player_win = 8;
  if (this->total_player_win() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_total_player_win(), target);
  }

  // bool is_active = 9;
  if (this->is_active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_is_active(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dice2.gamestatus)
  return target;
}

size_t gamestatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dice2.gamestatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string game_creator = 1;
  if (this->game_creator().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_game_creator());
  }

  // int64 deposit = 2;
  if (this->deposit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_deposit());
  }

  // int64 height = 3;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_height());
  }

  // int64 game_balance = 4;
  if (this->game_balance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_game_balance());
  }

  // int64 current_round = 5;
  if (this->current_round() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_current_round());
  }

  // int64 finished_round = 6;
  if (this->finished_round() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_finished_round());
  }

  // int64 total_bets = 7;
  if (this->total_bets() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total_bets());
  }

  // int64 total_player_win = 8;
  if (this->total_player_win() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total_player_win());
  }

  // bool is_active = 9;
  if (this->is_active() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void gamestatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dice2.gamestatus)
  GOOGLE_DCHECK_NE(&from, this);
  const gamestatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<gamestatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dice2.gamestatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dice2.gamestatus)
    MergeFrom(*source);
  }
}

void gamestatus::MergeFrom(const gamestatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dice2.gamestatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.game_creator().size() > 0) {
    _internal_set_game_creator(from._internal_game_creator());
  }
  if (from.deposit() != 0) {
    _internal_set_deposit(from._internal_deposit());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from.game_balance() != 0) {
    _internal_set_game_balance(from._internal_game_balance());
  }
  if (from.current_round() != 0) {
    _internal_set_current_round(from._internal_current_round());
  }
  if (from.finished_round() != 0) {
    _internal_set_finished_round(from._internal_finished_round());
  }
  if (from.total_bets() != 0) {
    _internal_set_total_bets(from._internal_total_bets());
  }
  if (from.total_player_win() != 0) {
    _internal_set_total_player_win(from._internal_total_player_win());
  }
  if (from.is_active() != 0) {
    _internal_set_is_active(from._internal_is_active());
  }
}

void gamestatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dice2.gamestatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gamestatus::CopyFrom(const gamestatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dice2.gamestatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gamestatus::IsInitialized() const {
  return true;
}

void gamestatus::InternalSwap(gamestatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  game_creator_.Swap(&other->game_creator_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(gamestatus, is_active_)
      + sizeof(gamestatus::is_active_)
      - PROTOBUF_FIELD_OFFSET(gamestatus, deposit_)>(
          reinterpret_cast<char*>(&deposit_),
          reinterpret_cast<char*>(&other->deposit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata gamestatus::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace dice2
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dice2::roundinfo* Arena::CreateMaybeMessage< ::dice2::roundinfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dice2::roundinfo >(arena);
}
template<> PROTOBUF_NOINLINE ::dice2::addrinfo* Arena::CreateMaybeMessage< ::dice2::addrinfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dice2::addrinfo >(arena);
}
template<> PROTOBUF_NOINLINE ::dice2::gamestatus* Arena::CreateMaybeMessage< ::dice2::gamestatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dice2::gamestatus >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
